// use cases regexTransform function
// regex generated by copilot
//  - italic using asterisk:         tag = "em"      regex = '/\*(.*?)\*/g'
//  - bold   using asterisk:         tag = "strong"  regex = /\*\*(.*?)\*\*/g
//  - strikethrough using 2 tildes:  tag = "del"     regex = '/~~(.*?)~~/g'
//  - code   using 2 backticks:      tag = "code"    regex = '/``(.*?)``/g'

// based on https://davidwells.io/snippets/regex-match-markdown-links
//  - link   using brackets:         tag = "a"       regex = '/\[([\w\s\d]+)\]\((https?:\/\/[\w\d./?=#]+)\)/;'
                    
const regexTransform = (regex, tag, text) =>
  text.replace(regex, `<${tag}>$1</${tag}>`);

const italicRegexTransform = (text) => 
  regexTransform(/\*(.*?)\*/g, "em", text)

const boldRegexTransform = (text) => 
  regexTransform(/\*\*(.*?)\*\*/g, "strong", text)

const strikethroughRegexTransform = (text) => 
  regexTransform(/~~(.*?)~~/g, "del", text)

const linkRegexTransform = (text) => 
  text.replace(/\[([\w\s\d]+)\]\((https?:\/\/[\w\d./?=#]+)\)/, `<a href="$2">$1</a>`)

// regex generated by copilot 
const replaceUnorderedListItems = (text) => 
  text.replace(/^\s*\*\s(.*)/gm, '<ul><li>$1</li></ul>');

const replaceOrderedListItems = (text) =>
  text.replace(/^\s*\d+\.\s(.*)/gm, '<ol><li>$1</li></ol>');
  
const mergeSameUnorderedListItems = (text) =>
  text.replace(/<\/li><\/ul>\n<ul><li>/g, '</li><li>');
  
const mergeSameOrderedListItems = (text) =>
  text.replace(/<\/li><\/ol>\n<ol><li>/g, '</li><li>');
  
const fixNestingForOrderedListInUnorderedList = (text) =>
  text.replace(/<\/li><\/ul>\n<ol>/g, '<ol>').replace(/<\/ol>\n<ul><li>/g, '</ol></li><li>');

const compose = (...funcs) => (text) =>  funcs.reduceRight((acc, func) => func(acc), text);

export const formatTransform = compose(
  linkRegexTransform,
  italicRegexTransform,
  boldRegexTransform,
  strikethroughRegexTransform,
);

const replaceListCompose = compose(replaceOrderedListItems, replaceUnorderedListItems);
const mergeListCompose = compose(mergeSameOrderedListItems, mergeSameUnorderedListItems);
const listTransform = compose(mergeListCompose, replaceListCompose);
export const listRegexTransform = compose(fixNestingForOrderedListInUnorderedList, listTransform);
